plugins {
    id 'java'
}

group 'gradleassignment'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

}




// QUESTION 1
// Look up java plugin documentation. Make changes in manifest to make it executable with correct class.
// When run using java -jar JAR_NAME_HERE the output should be text "Hello World" on the console.


apply plugin : 'java'

version ='1.8-SNAPSHOT'
jar {
    manifest {
       attributes 'Main-Class': 'Application'
    }
}



// QUESTION2
// look up idea plugin. make changes in build.gradle so that the sources of src/main/java as well as src/main/java2 are taken as sources.
// Ensure that when you make JAR file class files in both are added to the JAR.
// This will teach you how projects with non-conventional structure can be used with gradle.

apply plugin: 'java'
apply plugin: 'groovy'
version ='1.8.3-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://mvnrepository.com/artifact/org.apache.commons/commons-lang3" }
}

dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy', version: '3.0.0-alpha-3'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    //cucumber 'info.cukes:cucumber-java:1.2.2'
}

jar {
    manifest {
        attributes 'Main-Class': 'Application1'
        //attributes 'Main-Class': 'Java2'
    }
}
sourceSets {
    main{
        java{
           // srcDirs=['src/main/java']
            srcDirs=['src/main/java1' , 'src/main/java2']
        }
    }
}



// QUESTION 3
// add 2 files file1.xml and file1.txt in src/main/resources manually.
// make changes so that when creating jar only file1.xml is added to the jar.
apply plugin : 'java'
version ='1.8.4-SNAPSHOT'
jar{
    manifest{
        into 'resources', {
            from 'resources'
        }
    }
}
sourceSets {
    main{
        resources{
            srcDirs=['src/main/resources']
            exclude 'file1.txt'
        }
    }
}



// QUESTION 4
//  find how to what is an uberjar. Make changes so you can use commons lang3 StringUtil in your jar.
// Make this uber jar executable.
// The output should be text but that should be using the StringUtils class of commons lang3

// uber jar-- an uber-jar is an "over-jar", one level up from a simple "jar",
// defined as one that contains both your package and all its dependencies
// in one single JAR file.

repositories{
    mavenCentral()
    maven { url "https://mvnrepository.com/artifact/org.apache.commons/commons-lang3" }
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
}


// QUESTION 5
//Find a maven repository and add it as a repository. You can use bintray, jcenter

repositories {
    jcenter()
}


// QUESTION 6
// Write a task in file "mytasks.gradle" and use it in your build.gradle

apply from : 'myTasks.gradle'